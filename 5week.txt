5-1 컴포넌트
컴포넌트의 이름은 항상 대문자로 시작한다

> 부모 컴포넌트
다른 컴포넌트를 return 문 내부에 포함하는 컴포넌트
부모는 자식 컴포넌트의 모든 HTML을 함께 반환한다
> 자식 컴포넌트
App의 return 문에 포함된 컴포넌트
-> 부모의 return 문에 자식을 포함하는 행위를 “자식 컴포넌트를 배치한다”고 한다

# index.js에서는 App 컴포넌트를 리액트의 루트 요소 아래에 배치해 렌더링한다고 하였다. 단지 컴포넌트를 생성한다고 해서 바로 페이지에 렌더링하지는 않는다.


# 리액트에서 컴포넌트를 페이지에 렌더링하려면, App의 자식으로 배치하거나 Header처럼 자식으로 이미 배치된 컴포넌트의 또 다른 자식으로 배치해야 한다.

# 컴포넌트 트리
리액트 컴포넌트는 부모-자식관계라는 계층 구조를 형성한다. 컴포넌트 트리에서 App는 항상 최상위에 존재하므로 이를 '루트 컴포넌트'라고 부른다.

- 하나의 파일에 하나의 컴포넌트


# 리액트에서 선언되지 않은 컴포넌트를 사용할 때, “(컴포넌트 이름) is notdefined”와 같은 오류가 발생. Header 컴포넌트가 App.js에 선언되어 있지 않고, 다른 파일에서 불러오지도 않기 때문


5.2 JSX
자바스크립트와 HTML 태그를 섞어 사용하는 문법이다.

# 표현식
1. 산술표현식
2. 문자열표현식
3. 논리 표현식 -> false값이면 렌더링되지 않음

- 원시 자료형에 해당하는 숫자, 문자열, 불리언, null, undefined를 제외한 값을 사용하면 오류가 발생 (ex.객체 자료형 반환)


# 규칙
닫힘 규칙 : 여는 태그가 있으면 반드시 닫는 태그도 있어야 한다
최상위 태그 규칙 : JSX가 반환하는 모든 태그는 반드시 최상위 태그로 감싸야 한다 (HTML 태그를 최상위 태그로 사용하지 않으려면,  <React.Fragment> 태그를 사용하거나, 빈 태그 ‘<></>’를 사용)


# 조건부 렌더링
조건식의 결과에 따라 각기 다른 값을 페이지에 렌더링
조건에 따라 페이지 요소의 모습이나 종류를 다르게 표시하고 싶을 때사용

# 삼항연산자와 조건부
삼항 연산자는 코드가 매우 간결하지만, 자주 사용할 경우 가독성을 해칠 우려, 그리고 삼항 연산자는 다중 조건을 작성하기 힘듬. 반면 조건문은 가독성은 좋으나 기본적으로 작성해야 할 코드가 많고 중복 코드가 발생할 우려가 있음.

# 인라인 스타일링
JSX 문법으로 HTML의 style 속성을 이용해 직접 스타일을 정의하는 방법
하나의 파일 안에서 UI 표현을 위한 HTML과 스타일을 위한 CSS 규칙을 함께 작성할 수 있다는 장점. 그러나 페이지가 스타일을 계산할 때 불필요한 연산을 수행할 가능성이 있고, 스타일 규칙이 많으면 코드가 복잡해져 가독성이 떨어짐


5-3 컴포넌트에 값 전달하기

# Props
부모가 자식 컴포넌트에 단일 객체 형태로 값을 전달
Props는 부모만이 자식 컴포넌트에 전달할 수 있다

# defaultProps를 이용하면 컴포넌트가 받을 Props의 기본값을 미리 설정할 수 있기 때문에 오류를 미연에 방지할 수 있다

# Props로 컴포넌트 전달하기
자식 컴포넌트는 값으로 취급하므로 JSX의 자바스크립트 표현식으로 사용할 수 있다
컴포넌트를 개발자 도구의 콘솔에서 출력하면 객체 형식의 값을 출력한다
객체는 리액트 컴포넌트를 표현한 것이므로 오류가 발생하지 않는다